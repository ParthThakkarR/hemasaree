generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// This enum now covers the full lifecycle of an item
enum OrderItemStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURN_REQUESTED
  RETURN_APPROVED
  RETURNED
  CANCELLED
  RETURN_DECLINED
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String
  lastName             String?
  address              String?
  email                String     @unique
  phone                String?
  isAdmin              Boolean    @default(false)
  password             String
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  passwordResetToken   String?
  passwordResetExpires DateTime?
  products             Product[]  @relation("UserProducts")
  orders               Order[]
  payments             Payment[]
  carts                Cart[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  price        Float
  stock        Int
  images       String[]
  categoryId   String      @db.ObjectId
  category     Category    @relation(fields: [categoryId], references: [id])
  userId       String      @db.ObjectId
  user         User        @relation("UserProducts", fields: [userId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model Cart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  items      CartItem[]
  totalPrice Float      @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId       String   @db.ObjectId
  cart         Cart     @relation(fields: [cartId], references: [id])
  productId    String   @db.ObjectId
  product      Product  @relation(fields: [productId], references: [id])
  productName  String
  productImage String?
  quantity     Int      @default(1)
  price        Float
  withPolish   Boolean  @default(false)
  createdAt    DateTime @default(now()) // Added for reliable sorting
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  totalAmount     Float
  deliveryCharge  Float       @default(0)
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  payment         Payment?
  shippingAddress String?
}

model OrderItem {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String          @db.ObjectId
  order          Order           @relation(fields: [orderId], references: [id])
  productId      String          @db.ObjectId
  product        Product         @relation(fields: [productId], references: [id])
  withPolish     Boolean         @default(false)
  isReturnable   Boolean         @default(false)
  status         OrderItemStatus @default(PENDING)
  productName    String
  productImage   String?
  quantity       Int
  price          Float
  returnReason   String?
  returnNotes    String?
  returnImage    String?
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  orderId   String   @db.ObjectId @unique
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Float
  method    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}